//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MyAssets/InputSystems/TouchAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchAction"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""344f3700-1cb2-47e0-9fec-bbc347ac8ad4"",
            ""actions"": [
                {
                    ""name"": ""input"",
                    ""type"": ""PassThrough"",
                    ""id"": ""94d68b3e-f7dc-422e-9e42-a8a2a8d4438b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""press"",
                    ""type"": ""Button"",
                    ""id"": ""b5940477-9841-4087-bd7d-c683f158a51c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c66ef024-a1d3-440d-8005-efe6917114ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a90f139f-f0bb-4531-81ef-710c231abf95"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb304097-8bee-4fdc-a6a1-139bcd59795b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fc905e8-ac58-4ec6-b35f-099f6f386aaa"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_input = m_Touch.FindAction("input", throwIfNotFound: true);
        m_Touch_press = m_Touch.FindAction("press", throwIfNotFound: true);
        m_Touch_position = m_Touch.FindAction("position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_input;
    private readonly InputAction m_Touch_press;
    private readonly InputAction m_Touch_position;
    public struct TouchActions
    {
        private @TouchAction m_Wrapper;
        public TouchActions(@TouchAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @input => m_Wrapper.m_Touch_input;
        public InputAction @press => m_Wrapper.m_Touch_press;
        public InputAction @position => m_Wrapper.m_Touch_position;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @input.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnInput;
                @input.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnInput;
                @input.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnInput;
                @press.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPress;
                @press.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPress;
                @press.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPress;
                @position.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                @position.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                @position.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @input.started += instance.OnInput;
                @input.performed += instance.OnInput;
                @input.canceled += instance.OnInput;
                @press.started += instance.OnPress;
                @press.performed += instance.OnPress;
                @press.canceled += instance.OnPress;
                @position.started += instance.OnPosition;
                @position.performed += instance.OnPosition;
                @position.canceled += instance.OnPosition;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnInput(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
